class LinkedList {

	/**
	 * beginMarker -> list -> eneMarker.
	 */
	 init() {
		this.beginMarker = this._makeNewNode(null, 0, null)
		this.endMarker = this._makeNewNode(this.beginMarker, 0, null)
		this.beginMarker.next = this.endMarker
		this.size = 0
	}
	
	_makeNewNode(prev, value, next) {
		var newNode = Object()
		newNode.prev = prev
		newNode.value = value
		newNode.next = next
		return newNode
	}
	
	/**
	 * Returns the node at the speficied position in this list.
	 */
	_getNodeAt(index) {
		var size = this.size
		if (index < 0 || index >= size) {
			return null
		}
		var n = null
		if (index >= size / 2) {
			n = this.endMarker.prev
			var i = size - 1
			while (i != index) {
				n = n.prev
				i -= 1
			}
		} else {
			n = this.beginMarker.next
			var i = 0
			while (i != index) {
				n = n.next
				i += 1
			}
		}
		return n
	}
	
	/**
	 * Inserts a new element before the given node.
	 */
	_linkBefore(e, node) {
		var newNode = this._makeNewNode(node.prev, e, node)
		node.prev.next = newNode
		node.prev = newNode
		return newNode
	}
	
	/**
	 * Appends a new element to the end of this list.
	 */
	append(element) {
		this._linkBefore(element, this.endMarker)
		this.size += 1
		return element
	}
	
	/**
	 * Inserts the given element at the speficied position in this
	 * list.
	 */
	insert(index, element) {
		var n = this._getNodeAt(index)
		this._linkBefore(element)
		this.size += 1
		return element
	}
	
	/**
	 * Removes the element at the speficied position in this list.
	 */
	removeAt(index) {
		var n = this._getNodeAt(index)
		if (n == null) {
			return null
		}
		this.size -= 1
		n.next.prev = n.prev
		n.prev.next = n.next
		return n.value;
	}
	
	/**
	 * Replaces the element at the speficied position in this list 
	 * with the given element.
	 */
	setAt(index, element) {
		var n = this.getNodeAt(index)
		if (n == null) {
			return
		}
		return n.value = element
	}
	
	/**
	 * Returns the element at the speficied position in this list.
	 */
	getAt(index) {
		var n = this._getNodeAt(index)
		if (n == null) { 
			return null
		}
		return n.value
	}
	
	/**
	 * Returns the index of first occurence of the speficied element
	 * in this list, or -1 if this list does not contains the element.
	 */
	indexOf(element) {
		var i = 0
		var n = this.beginMarker.next
		while (n != this.endMarker) {
			if (n.value == element) {
				return i
			}
			i += 1
			n = n.next
		}
		return -1
	}
	
	/**
	 * Returns the index of last occurence of the speficied element
	 * in this list, or -1 if this list does not contains the element.
	 */
	lastIndexOf(element) {
		var i = 0
		var n = this.endMarker.prev
		while (n != this.beginMarker) {
			if (n.value == element) {
				return i
			}
			i += 1
			n = n.prev
		}
		return -1
	}
	
	/**
	 * Returns true if this list contains the speficied element.
	 */
	contains(element) {
		return this.indexOf(element) != -1
	}
	
	forEach(f) {
		for (e in this) { 
			f(e)
		}
	}
	
	/**
	 * Returns an iterator over all the elements in this list.
	 */
	_iterator() {
		var iterator = Object()
		var node = this.beginMarker.next
		iterator._hasNext = lambda -> node != this.endMarker
		iterator._next = lambda -> {
			var prev = node
			node = node.next
			return prev.value
		};
		return iterator
	}
	
	_str() {
		var i = this._iterator()
		if (!i._hasNext()) {
			return "[]"
		}
		var str = "["
		while (true) {
			str += i._next()
			if (!i._hasNext()) {
				break
			}
			str += ", "
		}
		return str + "]"
	}
}
