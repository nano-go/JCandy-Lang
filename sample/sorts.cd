fun bubbleSort(arr) {
	var size = arr.length()
	var swap = arr.swap
	for (i in range(0, size-1)) {
		for (j in range(0, size-1-i)) {
			if (arr[j + 1] < arr[j]) {
				swap(j + 1, j)
			}
		}
	}
}

fun selectionSort(arr) {
	var size = arr.length()
	for (i in range(0, size-1)) {
		var min = i
		for (j in range(i, size)) {
			if (arr[j] < arr[min]) {
				min = j
			}
		}
		arr.swap(i, min)
	}
}

fun pubInsertionSort(arr) {
	insertionSort(arr, 0, arr.length()-1)
}

fun insertionSort(arr, left, right) {
	if (right <= left) return
	for (i in range(left, right)) {
		var j = i
		var e = arr[j + 1]
		while (j >= 0 && e < arr[j]) {
			arr[j + 1] = arr[j]
			j -= 1
		}
		arr[j + 1] = e
	}
}

fun mergeSort(arr) {
	var aux = []
	fun merge(arr, l, r) {
		if (l >= r) {
			return
		}
		var mid = l + (r - l)/2
		merge(arr, l, mid)
		merge(arr, mid + 1, r)
		aux.clear()
		var lp = l
		var rp = mid + 1
		while (lp <= mid && rp <= r) {
			if (arr[lp] < arr[rp]) {
				aux.append(arr[lp])
				lp += 1
			} else {
				aux.append(arr[rp])
				rp += 1
			}
		}
		while (lp <= mid) {
			aux.append(arr[lp])
			lp += 1
		}
		while (rp <= r) {
			aux.append(arr[rp])
			rp += 1
		}
		for (e in aux) {
			arr[l] = e
			l += 1
		}
	}
	merge(arr, 0, arr.length()-1)
}

fun quickSort(arr) {
	fun partition(arr, left, right) {
		var swap = arr.swap
		var pivotIndex = range(left, right + 1).rand()
		swap(pivotIndex, left)
		var pivot = arr[left]
		var l = left
		var r = right+1
		while (true) {
			while (arr[l += 1] < pivot) {
				if (l == right) break
			}
			while (arr[r -= 1] >= pivot)  {
				if (r == left) break
			}
			if (r <= l) break
			swap(l, r)
		}
		swap(r, left)
		return r
	}
	
	fun qs(arr, left, right) {
		if (right - left <= 17) {
			insertionSort(arr, left, right)
			return
		}
		var mid = partition(arr, left, right)
		qs(arr, left, mid - 1)
		qs(arr, mid + 1, right)
	}
	
	qs(arr, 0, arr.length() - 1)
}

fun sorts_test() {
	var sample = Array(150, lambda e -> range(-1000, 1000).rand())
	var sorts = [
		bubbleSort, selectionSort, pubInsertionSort,
		mergeSort, quickSort
	]
	var ans = sample.copy().sort()
	for (sort in sorts) {
		sort(sample.copy())
		sort(sample.copy())
	}
	for (sort in sorts) {
		var cpy = sample.copy()
		var s = clock()
		sort(cpy)
		assert cpy == ans : 
			"Expected: " + ans + "\nAcutal: " + cpy
		println(sort.name + ": " +
			(clock() - s) + " ms")
	}
}
sorts_test()
