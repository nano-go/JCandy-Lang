package com.nano.candy.interpreter.runtime.module;

import com.nano.candy.interpreter.cni.CNIEnv;
import com.nano.candy.std.Names;
import com.nano.candy.sys.CandySystem;
import com.nano.candy.utils.CandyFileFilter;
import java.io.File;
import java.io.IOException;

/**
 * The default loader could load modules from the '$CANDY_HOME/libs',
 * the directory where the current running Candy source file resides and 
 * the current working directory.
 *
 * Directory Priority:
 *    1. The current source file's directory.
 *    2. $CANDY_HOME/libs
 *    3. The current working directory.
 */
public class CandyPathModuleLoader extends ModuleLoader {
	
	@Override
	protected Module findModule(CNIEnv env, String relativePath) 
		throws ModuleNotFoundException {
		Module module = null;
		String[] paths = {
			env.getCurrentDirectory(),
			CandySystem.getCandyLibsPath(),
			System.getProperty("user.dir")
		};
		for (String path : paths) {
			if (path != null &&
				(module = findFrom(path, relativePath)) != null) {
				return module;
			}
		}
		throw new ModuleNotFoundException
			("The module '" + relativePath + "' could not be found.");
	}

	private Module findFrom(String envDirectory, String relativePath) {
		Module module = attemptToFindSrcFile(envDirectory, relativePath);
		if (module == null) {
			module = attemptToFindDirectory(envDirectory, relativePath);
		}
		return module;
	}

	/**
	 * Attempts to find a single source file as a module.
	 *
	 * @return the module generated by the found source file or null
	 *         if not found.
	 */
	private Module attemptToFindSrcFile(String envDirectory, 
	                                    String relativePath) {
		String srcFilePath = getSourceFileName(relativePath);
		File srcFile = new File(envDirectory, srcFilePath);
		return srcFile.isFile() ? generteFileModule(srcFile) : null;
	}
	
	private String getSourceFileName(String path) {
		if (!path.endsWith("." + CandySystem.FILE_SUFFIX)) {	
			return path + "." + CandySystem.FILE_SUFFIX;
		}
		return path;
	}
	
	/**
	 * Attempts to find the files with the suffix ".cd" or the
	 * {@link Names#MOUDLE_FILE_NAME} source file as a module in 
	 * the specified directory.
	 *
	 * @return the module generated by the found source files or null
	 *         if not found.
	 */
	private Module attemptToFindDirectory(String envDirectory, String path) {
		File directory = new File(envDirectory, path);
		if (!directory.isDirectory()) {
			return null;
		}
		File moduleSrcFile = new File(directory, Names.MOUDLE_FILE_NAME);
		if (moduleSrcFile.isFile()) {
			return generteFileModule(directory.getName(), moduleSrcFile);
		}
		return generteDirectoryModule(directory);
	}

	private Module generteDirectoryModule(File directory) {
		File[] subSourceFiles = 
			directory.listFiles(CandyFileFilter.CANDY_FILE_FILTER);
		if (subSourceFiles.length == 0) {
			return null;
		}
		try {
			return new Module(
				directory.getName(),
				directory.getAbsolutePath(),
				true,
				subSourceFiles
			);
		} catch (IOException e) {
			return null;
		}
	}
	
	private Module generteFileModule(File file) {
		return generteFileModule(file.getName(), file);
	}
	
	private Module generteFileModule(String name, File file) {
		try {
			return new Module(
				name, file.getAbsolutePath(),
				false, new String[] {}
			);
		} catch (IOException e) {
			return null;
		}
	}
	
}
