package com.nano.candy.interpreter.cni;

import com.nano.candy.interpreter.builtin.CandyClass;
import com.nano.candy.interpreter.runtime.FileEnvironment;
import java.lang.reflect.Method;

/**
 * We use the annotation processor to generate Java files that contains
 * a register method used to generate a series of JavaFunctionObj.
 *
 * The generated class (every Java file contains a public class) name is
 * generated by the original class that the annotated methods are defined in.
 *
 * We get those JavaFunctionObj objects by relfection.
 *
 * <pre>
 * The annotation is {@link NativeFunc}.
 * <pre>
 */
public class NativeFuncRegister {
	
	/**
	 * Defines native functions to the specified environment.
	 */
	public static void register(FileEnvironment env, Class<?> nativeFunctionSet) {
		for (JavaFunctionObj nativeFunc : getNativeFunctions(nativeFunctionSet)) {
			env.getVariableTable().defineCallable(nativeFunc);
		}
	}
	
	/**
	 * Defines native functions to the specified Candy class.
	 */
	public static void register(CandyClass klass, Class<?> staticFunctionsSet) {
		for (JavaFunctionObj nativeFunc : getNativeFunctions(staticFunctionsSet)) {
			klass.setMetaData(nativeFunc.funcName(), nativeFunc);
		}
	}
	
	public static JavaFunctionObj[] getNativeFunctions(Class<?> nativeFunctionSet) {
		String klassName = nativeFunctionSet.getCanonicalName();
		String resgiterClassName = klassName + "_FuncsRegister";
		Class<?> registerClass;
		try {
			registerClass = Class.forName(resgiterClassName, 
				                          true, nativeFunctionSet.getClassLoader());
		} catch (ClassNotFoundException e) {
			return new JavaFunctionObj[0];
		}
		try {
			Method method = registerClass.getMethod("register");
			return (JavaFunctionObj[]) method.invoke(null);
		} catch (NoSuchMethodException e) {
			throw new IllegalArgumentException(
				"The class " + registerClass.getCanonicalName() + " has no" +
				" resgiter method.");
		} catch (SecurityException e) {
			throw new IllegalArgumentException(e.getMessage());
		} catch (Exception e) {
			throw new IllegalArgumentException(e.getMessage());
		}
	}
	
}
