
var FLAG_CONTINUE = Object()
var FLAG_BREAK = Object()

class Stream {
	fun init(iterable) {
		this.iterable = iterable
		this.eval = lambda e -> e
	}
	
	fun _eval(fn) {
		var eval = this.eval
		return lambda e -> {
			e = eval(e)
			if (e == FLAG_CONTINUE || e == FLAG_BREAK) {
				return e
			}
			return fn(e)
		}
	}
	
	fun collect(collector) {
		return collector(this)
	}

	fun filter(accepter) {
		this.eval = this._eval(lambda e -> {
			if (accepter(e)) {
				return e
			}
			return FLAG_CONTINUE
		})
		return this
	}
	
	fun map(convertor) {
		this.eval = this._eval(convertor)
		return this
	}
	
	fun limit(n) {
		this.eval = this._eval(lambda e -> {
			if (n <= 0) {
				return FLAG_BREAK
			}
			n -= 1
			return e
		})
		return this
	}
	
	fun skip(n) {
		this.eval = this._eval(lambda e -> {
			if (n > 0) {
				n -= 1
				return FLAG_CONTINUE
			}
			return e
		})
		return this
	}
	
	fun foreach(f) {
		var iterable = this.iterable
		var eval = this.eval
		for (e in iterable) {
			e = eval(e)
			if (e == FLAG_CONTINUE) {
				continue
			}
			if (e == FLAG_BREAK) {
				break
			}
			f(e)
		}
		return this
	}
}

fun arrayCollector(stream) {
	var arr = []
	stream.foreach(lambda e -> arr.append(e))
	return arr
}

fun averageCollector(stream) {
	var val = 0.0
	var n = 0
	stream.foreach(lambda e -> {
		val += e
		n += 1
	})
	return val / n
}

var students = Array(500, lambda i -> {
	var student = Object()
	student.age = range(18, 23).rand()
	student.mathScore = range(15, 101).rand()
	student.engScore = range(15, 101).rand()
	student.csScore = range(15, 101).rand()
	return student
})

fun expected(students) {
	var avrg = 0.0
	var limit = 0
	var n = 0
	for (s in students) {
		if (s.age >= 20) {
			var savrg = (s.mathScore + s.engScore + s.csScore) / 3
			if (savrg >= 40) {
				limit += 1
				if (limit <= 20) {
					continue
				}
				n += 1
				avrg += savrg
			}
		}
		if (limit >= 50) {
			break
		}
	}
	return avrg / n
}

fun test() {
	var res = Stream(students)
			.filter(lambda e -> e.age >= 20)
			.map(lambda e -> (e.mathScore + e.engScore + e.csScore) / 3)
			.filter(lambda e -> e >= 40)
			.limit(50)
			.skip(20)
			.collect(averageCollector)

	assert res == expected(students)
	println(res)
}
test()