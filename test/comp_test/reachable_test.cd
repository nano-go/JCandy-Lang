
var i = 0
while (i < 5) {
	i+=1
	continue
	"Unreachable"
}

var _true = true
fun f() {
	if (_true) {
		return
	} else {
		return 
	}
	"Unreachable"
}

fun f() {
	while (false) {}
	"Reachable"
	while (true) {
		continue
	}
	"Unreachable after while(true) { continue; }"
}

fun f() {
	while (true) {
		return
	}
	"Unreachable after while(true) { return; }"
}

fun f() {
	while (true) {
		while (true) {
			break
		}
		for (i in range(0, 10)) {
			break
		}
		"Reachable"
		if (a) {
			break 
		} else {
			continue
		}
		"Unreachable"
	}
	"Unreachable"
}

fun f() {
	if (true) {
		return
	}
	"Reachable"
	
	fun inner() {
		return
	}
	return
	"Unreachable"
	fun inner() { // Unreachable
		return // Unreachable
		var a = lambda -> { // Unreachable
			"Unreachable in lambda"
			return // Unreachable
			"Unreachable in lambda"
		}
		"Unreachable"
	}
}

fun f() {
	if (true) {
		return
	}
	"Reachable"
	while (true) {
		return
		break // Unreachable
		"Unreachable"
	}
	assert true
	return
	"Unreachable"
}

class A {
	a() {
		return
		"Unreachable in method"
	}
	
	b() {
		"Reachable"
	}
}

break // Error
fun a() { // Unreachable
	"Unreachable"
	return // Unreachable
	"Unreachable..."
	while (true) { // Unreachable
		"Unreachable"
		break // Unreachable
	}
	"Unreachable"
}