fun a(b, c) {
	if (b * c >= 15) return b * c
	return a(b + 1, c + 1)
}

a(1, 2)

fun pow(x, n) {
	fun quickPow(x, n) {
		if (n == 0) {
			return 1
		}
		if (n == 1) {
			return x
		}
		var half = pow(x, n / 2)
		if (n % 2 == 0) {
			return half * half
		}
		return half * half * x
	}
	
	if (n >= 0) {
		return quickPow(x, n)
	}
	return 1.0 / quickPow(x, -n)
}

fun assertHelper(x, n, expected) {
	var ans = pow(x, n)
	assert ans == expected :
	       "pow(" + x + ", " + n + ") expected: " + 
	       expected + ", but was: " + ans
}


assertHelper(0, 0, 1)
assertHelper(1, 100, 1)
assertHelper(5, 6, 15625)
assertHelper(2.5, 10, 9536.7431640625)
assertHelper(-3, 14, 4782969)
assertHelper(-2.5, 9, -3814.697265625)

assertHelper(5, -2, 0.04)
assertHelper(0.15, -5, 13168.724279835391)
assertHelper(2, -4, 0.0625)

fun fibonacci_sequenece(n) {
	if (n <= 3) return 1
	return fibonacci_sequenece(n - 2) + fibonacci_sequenece(n - 1)
}

assert fibonacci_sequenece(10) == 34