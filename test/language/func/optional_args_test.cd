import "unit" as unit

class OptionalArgsTest : unit.TestCase {

	fun fn_1op1(a, b="b") { [a, b]; }
	fun fn_1op2(a, b="b", c="c") { [a, b, c]; }
	fun fn_1op1_1(a, b="b", c) { [a, b, c]; }
	fun fn_op1_1(a="a", b) { [a, b]; }
	fun fn_op1(a="a") { [a]; }
	fun fn_1op1_s1(a, b="b", *c, d) { [a, b, c, d]; }

	fun expectedArgError(klass = false, fn, paramsN, argsN, expr) {
		try {
			expr()
		} intercept ArgumentError as e {
			var name = fn.name
			if (klass) {
				name = "${OptionalArgsTest.className}.${name}"
			}
			@assertEquals("The ${name} takes ${paramsN}" +
				" arguments, but ${argsN} were given.", e.getMessage())
		} else {
			@assertFail("Expecting an argument error raised.")
		}
	}

	fun simple_test() {
		fun foo(a, b = "b", c) { [a, b, c]; }
		@assertEquals([1, "b", 3], foo(1, 3))
		@assertEquals([1, 2, 3], foo(1, 2, 3))

		var foo = |a="a", b="b"| -> [a, b]
		@assertEquals(["a", "b"], foo())
		@assertEquals([1, "b"], foo(1))
		@assertEquals([1, 2], foo(1, 2))

		fun foo(a, b, c="c") { [a, b, c]; }
		@assertEquals([1, 2, "c"], foo(1, 2))
		@assertEquals([1, 2, 3], foo(1, 2, 3))

		fun foo(a, b="b", *c, d) { [a, b, c, d]; }
		@assertEquals([1, "b", [], 2], foo(1, 2))
		@assertEquals([1, 2, [], 3], foo(1, 2, 3))
		@assertEquals([1, 2, [3], 4], foo(1, 2, 3, 4))
		@assertEquals([1, 2, [3, 4], 5], foo(1, 2, 3, 4, 5))
	}

	fun methods_test() {
		@assertEquals(["a"], @fn_op1())
		@assertEquals([1], @fn_op1(1))

		@assertEquals(["a", 1], @fn_op1_1(1))
		@assertEquals([1, 2], @fn_op1_1(1, 2))

		@assertEquals([1, "b", 2], @fn_1op1_1(1, 2))
		@assertEquals([1, 2, 3], @fn_1op1_1(1, 2, 3))

		@assertEquals([1, "b", "c"], @fn_1op2(1))
		@assertEquals([1, 2, "c"], @fn_1op2(1, 2))
		@assertEquals([1, 2, 3], @fn_1op2(1, 2, 3))

		@assertEquals([1, "b"], @fn_1op1(1))
		@assertEquals([1, 2], @fn_1op1(1, 2))

		@assertEquals([1, "b", [], 2], @fn_1op1_s1(1, 2))
		@assertEquals([1, 2, [], 3], @fn_1op1_s1(1, 2, 3))
		@assertEquals([1, 2, [3], 4], @fn_1op1_s1(1, 2, 3, 4))

		class Foo {
			fun init(a, b="b", *c) {
				@a=a
				@b=b
				@c=c
			}
		}
		var f = Foo(1)
		@assertEquals([1, "b", []], [f.a, f.b, f.c])
		var f = Foo(1, 2)
		@assertEquals([1, 2, []], [f.a, f.b, f.c])
		var f = Foo(1, 2, 3, 4)
		@assertEquals([1, 2, [3, 4]], [f.a, f.b, f.c])
	}

	/**
	 * Tests passing unpacked arguments.
	 */
	fun unpack_test() {
		fun foo(a="a") {[a];}
		@assertEquals(["a"], foo(*[]))
		@assertEquals([1], foo(*[1]))
		@assertEquals([1], foo(1, *[2]))

		fun foo(a, b = "b") { [a, b]; }
		@assertEquals([1, 2], foo(*1..3))
		@assertEquals([1, 2], foo(*1..4))
		@assertEquals([1, "b"], foo(*[1]))

		fun foo(a="a", b) { [a, b]; }
		@assertEquals([1, 2], foo(*1..3))
		@assertEquals([1, 2], foo(*1..4))
		@assertEquals(["a", 1], foo(*1..2))

		fun foo(a="a", b, c) { [a, b, c]; }
		@assertEquals(["a", 1, 2], foo(*1..3))
		@assertEquals([1, 2, 3], foo(*1..4))

		fun foo(a="a", b, *c) { [a, b, c]; }
		@assertEquals(["a", 1, []], foo(*[1]))
		@assertEquals([1, 2, []], foo(*[1, 2]))
		@assertEquals([1, 2, [3, 4]], foo(*1..5))

		fun foo(a, b="b", *c, d) { [a, b, c, d]; }
		@assertEquals([1, "b", [], 2], foo(1, *2..3))
		@assertEquals([1, 2, [], 3], foo(1, 2, *3..4))
		@assertEquals([1, 2, [], 3], foo(*1..4))
	}

	/**
	 * Tests whether the `ArgumentError` is raised if the mismatched arguments 
	 * are passed and tests the message of the error is correct.
	 *
	 * See @expectedArgError
	 */
	fun error_test() {
		fun foo(a, b, c = "c") {}
		@expectedArgError(foo, "2..3", 1, -> foo(1))
		@expectedArgError(foo, "2..3", 4, -> foo(1, 2, 3, 4))
		@expectedArgError(foo, "2..3", 1, -> foo(*1..1))

		@expectedArgError(true, @fn_1op1_1, "2..3", 1, -> @fn_1op1_1(1))
		@expectedArgError(true, @fn_1op1_1, "2..3", 4, -> @fn_1op1_1(1, 2, 3, 4))
		@expectedArgError(true, @fn_1op1_1, "2..3", 1, -> @fn_1op1_1(*1..1))
		@expectedArgError(true, @fn_1op1_1, "2..3", 0, -> @fn_1op1_1())

		fun foo(a=0, b=1) {}
		@expectedArgError(foo, "0..2", 3, -> foo(1, 2, 3))

		@expectedArgError(true, @fn_op1, "0..1", 2, -> @fn_op1(1, 2))

		fun foo(a, b=1) {}
		@expectedArgError(foo, "1..2", 0, -> foo())
		@expectedArgError(foo, "1..2", 3, -> foo(1, 2, 3))

		fun foo(a=0) {}
		@expectedArgError(foo, "0..1", 2, -> foo(1, 2))

		fun foo(a, b=2, *c) {}
		@expectedArgError(foo, "1+", 0, -> foo())

		fun foo(a, b, c=1, *d) {}
		@expectedArgError(foo, "2+", 1, -> foo(1))
		@expectedArgError(foo, "2+", 0, -> foo())

		fun foo(a, b="b", *c, d) { [a, b, c, d]; }
		@expectedArgError(foo, "2+", 1, -> foo(1))
		@expectedArgError(foo, "2+", 0, -> foo())
		@expectedArgError(foo, "2+", 1, -> foo(*0..1))
		@expectedArgError(foo, "2+", 2, -> foo(1, *0..0))

		@expectedArgError(true, @fn_1op1_s1, "2+", 1, -> @fn_1op1_s1(1))
		@expectedArgError(true, @fn_1op1_s1, "2+", 0, -> @fn_1op1_s1())
		@expectedArgError(true, @fn_1op1_s1, "2+", 1, -> @fn_1op1_s1(*0..1))

		class Foo {
			fun init(a, b="b",*c, d) {}
		}
		@expectedArgError(Foo, "2+", 1, ->Foo(1))
		@expectedArgError(Foo, "2+", 0, ->Foo())
	}
}
