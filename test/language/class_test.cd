import "unit" as unit

/**
 * For modifiers tests.
 */
class User {
	reader id, name
	writer config
	pri verification

	fun init(id, name) {
		@id = id
		@name = name
		@verification = @name + @id
	}

	fun modifyId(id) {
		@id = id
	}
	fun modifyName(name) {
		@name = name
	}
	fun getConfig() {
		@config
	}
	fun verify(v) {
		return @verification == v
	}
}



class ClassTest : unit.TestCase {
	fun declr_test() {
		class Foo {
			fun init(value) {
				this.value = value
			}
			fun incrase() {
				return this.value += 1
			}
		}
		var foo = Foo(15)
		this.assertEquals(15, foo.value)
		this.assertEquals(16, foo.incrase())
	}

	fun simple_inherit_test() {
		class Super {
			fun init(value) {
				this.super_value = value
			}

			fun getSuperValue() {
				return this.super_value
			}
		}

		class Subclass : Super {
			fun init(value) {
				super.init(value)
				this.value = value
			}
			fun getValue() {
				return this.value
			}
		}
		var foo = Subclass(15)
		this.assertEquals(15, foo.value)
		foo.value += 1
		this.assertEquals(15, foo.super_value)
		this.assertEquals(15, foo.getSuperValue())
		this.assertEquals(16, foo.value)
		this.assertEquals(16, foo.getValue())

		class Foo {
			fun init() {
				this.value = 0
			}
		}
		class Bar : Foo {}
		this.assertEquals(0, Bar().value)
	}

	fun inherit_test() {
		class Foo {
			fun init(value) {}
		}
		class Bar : Foo {}
		class Baz : Bar {}
		this.expectedErrorRaised(ArgumentError, lambda -> Bar())
		this.expectedErrorRaised(ArgumentError, lambda -> Baz())
	
		class Foo {
			fun init(value) {
				this.value = value
			}
			fun returnFoo() { return "Foo"; }
		}
		class Bar : Foo {
			fun returnBar() { return "Bar"; }
		}
		class Baz : Bar {
			fun returnBaz() { return "Baz"; }
		}
		this.expectedErrorRaised(ArgumentError, lambda -> Bar())
		this.expectedErrorRaised(ArgumentError, lambda -> Baz())
		this.assertEquals("Bar", Baz(0).returnBar())
		this.assertEquals("Baz", Baz(0).returnBaz())
		this.assertEquals("Foo", Baz(0).returnFoo())

		class Foo {
			fun init(value) {
				raise TypeError(str(value))
			}
		}
		class Bar : Foo {}
		class Baz : Bar {}
		this.expectedErrorRaised(TypeError, lambda -> Baz(0))
		this.expectedErrorRaised(TypeError, lambda -> Bar(0))
	}

	fun callSuperMethod_test() {
		class Foo {
			fun init(value) {
				this.value = value
			}

			fun returnFoo() { return "Foo"; }
		}

		class Bar : Foo {
			fun init() {
				super.init(5)
			}

			fun callSuperMethodError() {
				super.value();
			}

			fun getSuperMethodError() {
				super.value
			}

			fun superReturnFoo() { return super.returnFoo(); }

			fun returnFoo() {
				return "FooFoo"
			}
		}

		this.assertEquals("FooFoo", Bar().returnFoo())
		this.assertEquals("Foo", Bar().superReturnFoo())
		this.expectedErrorRaised(AttributeError, Bar().getSuperMethodError)
		this.expectedErrorRaised(AttributeError, Bar().callSuperMethodError)
	}

	fun static_test() {
		class Foo {
			static var a = 15
			static {
				var foo = 0
				@foo = foo
				fun @getFoo() {
					return @foo
				}
				class @Bar {
					fun getHello() {
						return "Hello"
					}
				}
				@a = 20
				if (@a == 20) {
					fun @getFoo2() { return "Foo2"; }
				}
				else {
					fun @getFoo2() { raise Error("Unsupported"); }
				}
			}
			static var b = @a
		}
		@assertEquals("Foo2", Foo.getFoo2())
		@assertEquals(20, Foo.a)
		@assertEquals(20, Foo.b)
		@assertEquals(0, Foo.foo)
		@assertEquals(0, Foo.getFoo())
		@assertEquals("Hello", Foo.Bar().getHello())
	}

	fun nestedStatic_test() {
		class Foo {
			static var a = "Foo.a"
			static var b = "Foo.b"
			static class Bar {
				static var a = "Bar.a"
				static var b = "Bar.b"
				static {
					var a = 15
				}
				static class _CONSTANTS {
					static var BAR_A = Foo.Bar.a
					static var BAR_B = Foo.Bar.b
					static var FOO_A = Foo.a
					static var FOO_B = Foo.b
					static var A_IN_STATIC = a
				}
			}
		}
		@assertEquals("Foo.a", Foo.Bar._CONSTANTS.FOO_A)
		@assertEquals("Foo.b", Foo.Bar._CONSTANTS.FOO_B)
		@assertEquals("Bar.a", Foo.Bar._CONSTANTS.BAR_A)
		@assertEquals("Bar.b", Foo.Bar._CONSTANTS.BAR_B)
		@assertEquals(15, Foo.Bar._CONSTANTS.A_IN_STATIC)
	}

	fun classAttrs_test() {
		var Callable = @classAttrs_test._class()

		// Methods
	 	@assertEquals("Object", Object.className)
	 	@assertEquals(Object, Range.superClass)
	 	@assertTrue(Range.isSuperclassOf(Range))
	 	@assertTrue(Object.isSuperclassOf(Range))
	 	@assertTrue(Range.isSubclassOf(Object))
	 	@assertTrue(Range.instance(range(0, 150)))
	 	@assertTrue(Range.methods().length() > 10)
		@assertTrue(Range.methods().contains("rand"))
		@assertTrue(Array.methods().contains("insert"))
		@assertTrue(Array.methods().contains("_iterator"))
		@assertTrue(Array.methods().contains("_str"))

		// Callable
		@assertEquals(Callable, Object._class())
		@assertEquals(Callable, Callable._class())
		@assertEquals("Callable", Callable.className)
		@assertEquals("Callable", Callable.name)
		@assertEquals("Callable", Callable.fullName)
		@assertEquals(0, Callable.arity)
		@assertTrue(Callable.isSuperclassOf(Callable))
		@assertTrue(Callable.isSubclassOf(Object))
		@assertFalse(Callable.isSubclassOf(Range))

		// Illegal Argument
		@expectedErrorRaised(TypeError, -> Object.isSuperclassOf(range(0, 15)))
		@expectedErrorRaised(TypeError, -> Object.isSubclassOf(range(0, 15)))

		// Read-only Attributes
		@expectedErrorRaised(AttributeError, -> Object.name = "a")
		@expectedErrorRaised(AttributeError, -> Object.fullName = "a")
		@expectedErrorRaised(AttributeError, -> Object.arity = 0)
		@expectedErrorRaised(AttributeError, -> Object.vararg = 0)
		@expectedErrorRaised(AttributeError, -> Object.className = "a")
		@expectedErrorRaised(AttributeError, -> Object.superClass = "a")
		@expectedErrorRaised(AttributeError, -> Object.isSubclassOf = "")
		@expectedErrorRaised(AttributeError, -> Object.isSuperclassOf = "")
		@expectedErrorRaised(AttributeError, -> Object.methods = "")
		@expectedErrorRaised(AttributeError, -> Object.instance = "")

		// Change a Class
		Object.equals = (a, b) -> {
			return a == b
		}
		@assertTrue(Object.equals(5, 5))
		Array.i = 15
		@assertEquals(15, []._class().i)
	}

	fun callClassInJava_test() {
		class Foo {
			fun init(e, i) {
				@e = e
				@i = i
			}
		}
		[1, 2, 3, 4, 5].foreach(Range)
		[1, 2, 3, 4, 5].foreach(Foo)
	}

	



	/**
	 * Access Modifiers Tests
	 */

	fun testUser(user, id, name) {
		 @assertEquals(id, user.id)
		 @assertEquals(name, user.name)
		 // read-only
		 @expectedErrorRaised(AttributeError, -> user.id = 0)
		 @expectedErrorRaised(AttributeError, -> user.name = "abc")
		 user.modifyId(5)
		 user.modifyName("abc")
		 @assertEquals(5, user.id)
		 @assertEquals("abc", user.name)

		 user.config = {"color": 0xFF00FF00}
		 @assertEquals({"color": 0xFF00FF00}, user.getConfig())
		 // write-only
		 @expectedErrorRaised(AttributeError, -> user.config)

		 @expectedErrorRaised(AttributeError, -> user.verification)
		 @expectedErrorRaised(AttributeError, -> user.verification = 5)
		 @assertTrue(user.verify(name + id))
	}

	fun modifiers1_test() {
		var user = User(0, "foo")
		@testUser(user, 0, "foo")
	}

	fun modifers2_test() {
		class RootUser : User {
			pri root
			fun modifyId(id) {
				@id = id
			}
			fun modifyName(name) {
				@name = name
			}
			fun getConfig() {
				@config
			}
			fun verify(v) {
				return @verification == v
			}
		}
		@testUser(RootUser(0, "root"), 0, "root")
		@expectedErrorRaised(AttributeError, -> RootUser(0, "root").root)
		@expectedErrorRaised(OverrideError, -> {
			class RootUser : User {
				pub name
			}
		})
	}
}
