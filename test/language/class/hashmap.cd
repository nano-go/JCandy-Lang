
class HashMap {
	init(initialCapacity) {
		if (initialCapacity <= 0) { 
			initialCapacity = 16
		}
		this.table = Array(initialCapacity, null)
		this.loadFactor = 0.75
		this.threshould = (initialCapacity * this.loadFactor).intVal()
		this.size = 0
	}
	
	_makeEntry(key, value, next) {
		var entry = Object()
		entry.key = key
		entry.value = value
		entry.next = next
		return entry
	}
	
	/**
	 * Computes the index in this table range by the key._hashCode().
	 */
	_hash(key) {
		return key._hashCode() % this.table.length()
	}
	
	/**
	 * Allocates a new table that is double the size of the previous table.
	 */
	_resize() {
		var oldTable = this.table
		var newSize = oldTable.length() * 2
		// cache 'put' to local slot.
		var putMethod = this.put
		this.table = Array(newSize, null)
		this.threshould = (newSize * this.loadFactor).intVal()
		for (e in oldTable) {
			if (e == null) {
				continue;
			}
			while (e != null) {
				putMethod(e.key, e.value)
				e = e.next
			}
		}
	}
	
	/**
	 * Returns the entry in the bucket at the specified index in this
	 * table to which the specified key is equal, or null if not found.
	 */
	_findEntry(index, key) {
		var entry = this.table[index]
		while (entry != null) {
			if (entry.key == key) {
				return entry
			}
			entry = entry.next
		}
		return null
	}
	
	/**
	 * Puts the specified value to which the specified key is mapped.
	 */
	put(key, value) {
		if (this.size >= this.threshould) {
			this._resize()
		}
		var index = this._hash(key)
		var entry = this._findEntry(index, key)
		if (entry != null) {
			entry.value = value
		} else {
			this.table[index] = this._makeEntry(key, value, this.table[index])
			this.size += 1
		}
		return value
	}
	
	/**
	 * Returns a value to which the specified key is mapped.
	 */
	get(key) {
		var index = this._hash(key)
		var entry = this._findEntry(index, key)
		if (entry != null) {
			return entry.value
		}
		return entry
	}
	
	/**
	 * Operator overload: 'hashMap[key]'
	 */
	_getItem(key) { 
		return this.get(key); 
	}
	
	/**
	 * Operator overload: 'hashMap[key] = value'
	 */
	_setItem(key, value) { 
		return this.put(key, value); 
	}
}

fun putterGetterTest(hashMap, n, valueProducer) {
	var i = 0
	while (i <= n) {
		var value = valueProducer(i)
		hashMap[i] = value
		hashMap.put("i" + i, value)
		assert hashMap[i] == value
		assert hashMap.get("i" + i) == value
		i += 1
	}
}

fun test() {
	var hashMap = HashMap(16)
	putterGetterTest(hashMap, 1500, lambda i -> i)
	putterGetterTest(hashMap, 1500, lambda i -> i*i)
}

test()
