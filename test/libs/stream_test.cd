import (
	"stream" as stream
	"unit" as unit
)

class StreamTest : unit.TestCase {
	fun max_test() {
		var tscase = Array(500, lambda i -> range(-2000, 2000).rand())
		fun expected(arr) {
			var max = -2000
			for (e in arr) {
				if (e > max) max = e
			}
			return max
		}
		this.assertEquals(expected(tscase), stream.Stream(tscase).max())
		
		tscase = Array(1000, lambda i -> range(0, 1000).rand())
		fun expected(arr) {
			var max = 0
			var limit = 0
			for (e in arr) {
				if (e % 3 == 0) continue
				if (limit == 50) break
				if (e > max) max = e
				limit += 1
			}
			return max
		}
		this.assertEquals(
			expected(tscase), 
			stream.Stream(tscase)
				.filter(lambda e -> e % 3 != 0)
				.limit(50).max()
		)
	}

	fun min_test() {
		var tscase = Array(500, lambda i -> range(-2000, 2000).rand())
		fun expected(arr) {
			var min = 2000
			for (e in arr) {
				if (e < min) min = e
			}
			return min
		}
		this.assertEquals(expected(tscase), stream.Stream(tscase).min())
		
		tscase = Array(1000, lambda i -> range(0, 1000).rand())
		fun expected(arr) {
			var min = 1000
			var limit = 0
			for (e in arr) {
				if (e % 3 == 0) continue
				if (limit == 50) break
				if (e < min) min = e
				limit += 1
			}
			return min
		}
		this.assertEquals(
			expected(tscase), 
			stream.Stream(tscase)
				.filter(lambda e -> e % 3 != 0)
				.limit(50).min()
		)
	}

	fun filter_test() {
		var tscase = Array(1000, lambda i -> {
			var user = Object()
			user.id = range(0, 1555).rand()
			user.age = range(15, 50).rand()
			return user
		})
		
		fun expected(arr) {
			var count = 0
			for (e in arr) {
				if (e.id <= 400 && e.age <= 18) {
					count += 1
				}
			}
			return count;
		}
		this.assertEquals(
			expected(tscase),
			stream.Stream(tscase)
				.filter(lambda e -> e.id <= 400 && e.age <= 18)
				.count()
		)
	}

	fun map_test() {
		class User {
			fun init(id, name) {
				this.id = id
				this.name = name
			}
		}
		var tscase = Array(1000, lambda e -> {
			User(e, "user" + e)
		})
		
		fun expected() {
			var arr = []
			for (user in tscase) {
				if (user.id % 2 == 0) 
					arr.append(user.name)
			}
			return arr
		}
		
		this.assertEquals(
			expected(),
			stream.Stream(tscase)
				.filter(lambda e -> e.id % 2 == 0)
				.map(lambda e -> e.name)
				.toArray()	
		)	
	}

	fun flatMap_test() {
		var arr =[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9]]	
		var res = stream.Stream(arr)
			.flatMap(lambda e -> e)
			.filter(lambda e -> e%2==0)
			.toArray()
		this.assertEquals([0, 2, 4, 6, 8], res)

		this.expectedErrorRaised(TypeError, 
			lambda -> stream.Stream(arr).flatMap(lambda e->null).count())
	}

	fun distinct_test() {
		var arr = Array(50, lambda e -> range(0, 10).rand())
		fun expectedAns(arr) {
			var ans = []
			var map = {}
			for (e in arr) {
				if (map.contains(e)) continue
				map[e] = true
				ans.append(e)
			}
			return ans
		}
		this.assertEquals(expectedAns(arr), stream.Stream(arr).distinct().toArray())
		this.assertEquals([0], stream.Stream([0]).distinct().toArray())
		this.assertEquals([], stream.Stream([]).distinct().toArray())
	}

	fun fold_test() {
		var arr = Array(10, lambda e -> e)
		this.assertEquals(
			12,
			stream.Stream(arr)
				.filter(lambda e -> e%2==0)
				.map(lambda e -> e*2)
				.fold(lambda x, y -> (x+y)/2)
		)

		this.assertEquals(
			0,
			stream.Stream([0])
				.fold(lambda x, y -> this.assertFail("Unexpect reach here."))
		)

		this.assertEquals(
			null,
			stream.Stream([])
				.fold(lambda x, y -> this.assertFail("Unexpect reach here."))
		)
	}

	fun sort_test() {
		var arr = Array(100, lambda e -> range(0, 1000).rand())
		
		fun expectedAns(arr) {
			var ans = []
			for (e in arr) {
				if (e % 2 == 0) {
					ans.append(e*2)
				}
			}
			ans.sort()
			return ans
		}
		
		this.assertEquals(
			expectedAns(arr),
			stream.Stream(arr)
				.filter(lambda e -> e%2==0)
				.map(lambda e -> e*2)
				.sort().toArray()
		)

		this.assertEquals(5, stream.Stream([5]).sort().max())
		this.assertEquals(null, stream.Stream([]).sort().max())
	}

	fun skip_limit_reduce_test() {
		var tscase = Array(1000, lambda e -> e)	
		fun expected() {
			var sum = 10
			for (i in range(10, 60)) {
				sum += i
			}
			return sum
		}
		this.assertEquals(
			expected(),
			stream.Stream(tscase)
				.skip(10).limit(50).reduce(10, lambda e1, e2 -> e1 + e2)
		)
		
		var singleElement = [ 0 ]
		this.assertEquals(10, stream.Stream(singleElement).reduce(10, lambda x, y -> x + y))
		this.assertEquals(500, stream.Stream([]).reduce(500, null))
	}

	fun find_test() {
		var arr = Array(100, lambda e -> range(0, 1000).rand())
		fun findFirstAns(arr) {
			for (e in arr) 
				if (e%4 == 0) return e
			return null
		}
		this.assertEquals(findFirstAns(arr), 
			stream.Stream(arr)
				.filter(lambda e -> e % 4 == 0)
				.findFirst())
	}

	fun match_test() {
		var randData = Array(1000, lambda e -> range(0, 120).rand())
		
		fun matchExpected() {
			for (e in randData) {
				if (e <= 5) { return true; }
			}
		}
		this.assertEquals(
			matchExpected(),
			stream.Stream(randData).anyMatch(lambda e -> e <= 5)
		)
			
		fun allMatchExpected() {
			for (e in randData) {
				if (e == 50) { return false; }
			}
		}	
		this.assertEquals(
			allMatchExpected(),
			stream.Stream(randData).allMatch(lambda e -> e != 50)
		)
		
		
		fun noneMatchExpected() {
			for (e in randData) {
				if (e == 50) { return false; }
			}
		}	
		this.assertEquals(
			noneMatchExpected(),
			stream.Stream(randData).noneMatch(lambda e -> e == 50),
		)
	}

	fun toMap_test() {
		var arr = Array(50, lambda e -> e)
		var map = stream.Stream(arr).toMap(lambda map, e -> map[e]=e*2)
		var ans = Map(50)
		for (i in range(0, 50)) ans[i] = i*2
		this.assertEquals(ans, map)
		this.assertEquals({}, stream.Stream([]).toMap(null))
	}

	fun toTuple_test() {
		var arr = Array(50, lambda e -> e)
		this.assertEquals(tuple(arr), stream.Stream(arr).toTuple())
		this.assertEquals((), stream.Stream([]).toTuple())
	}

	fun join_test() {
		var arr = Array(50, lambda e -> e)
		this.assertEquals(str(arr), "["+stream.Stream(arr).join(", ")+"]")
		this.assertEquals("", stream.Stream([]).join(","))
	}

}
