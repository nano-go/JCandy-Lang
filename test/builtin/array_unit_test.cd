import "unit" as unit
import "../custom" as custom

custom.importAll()

class ArrayTest : unit.TestCase {
	fun indexAccess_test() {
		var arr = [0, 1, 2, 3]
		for (i in range(0, 4)) {
			@assertEquals(i, arr[i])
		}
		for (i in range(-4, 0)) {
			@assertEquals(i+4, arr[i])
		}
		arr.insert(-1, 4)
		@assertEquals([0, 1, 2, 3, 4], arr)
		arr.insert(-6, -1)
		@assertEquals([-1, 0, 1, 2, 3, 4], arr)

		@expectedErrorRaised(RangeError, -> arr.insert(-8, 0))
		@expectedErrorRaised(RangeError, -> arr.insert(7, 0))

		@assertEquals(-1, [-1][-1])
		@expectedErrorRaised(RangeError, -> [][-1])
	}

	fun insertion_test() {
		var arr = []
		arr.insertAll(0, *(0, 1, 2, 3))
		@assertEquals([0, 1, 2, 3], arr)
		arr.insertAll(-2, *LinkedList("1", "2"))
		@assertEquals([0, 1, 2, "1", "2", 3], arr)
		arr.insertAll(0, *[])
		@assertEquals([0, 1, 2, "1", "2", 3], arr)
		arr.insertAll(0, *())
		@assertEquals([0, 1, 2, "1", "2", 3], arr)

		arr = []
		arr.insertAll(-1, *(1, 2))
		@assertEquals([1, 2], arr)
	}

	fun sort_test() {
		var arr = [(0, 1), (1, 0)]
		arr.sortBy(e -> e[0])
		@assertEquals([(0, 1), (1, 0)], arr)
		arr.sortBy(e -> e[1])
		@assertEquals([(1, 0), (0, 1)], arr)
	}

	fun operator_test() {
		@assertEquals([1, 2, 1, 2], [1, 2]* 2)
		@assertEquals([1, 1, 1], [1] * 3)
		@assertEquals([], [] * 2)
		@assertEquals([], [1, 2, 3] * 0)
		@assertEquals([], [1, 2, 3] * -1)

		var arr = [1, 2, 3]
		@assertEquals([1], arr[0..1])
		@assertEquals([1, 2], arr[0..2])
		@assertEquals([1, 2, 3], arr[0..3])
		@assertEquals([1, 2, 3], arr[0..-1])
		@assertEquals([1, 2], arr[0..-2])
		@assertEquals([1], arr[0..-3])
		@assertEquals([], arr[-1..-3])
		@assertEquals([2, 3], arr[1..-1])

		arr = [1]
		@assertEquals([1], arr[0..-1])
		@assertEquals([], arr[0..0])
		@assertEquals([1], arr[-1..-1])
		@assertEquals([], arr[-1..-2])

		arr = [1]
		arr[0..1] = array(0..15)
		@assertEquals(array(0..15), arr)
		arr[5..10] = array(0..6)
		@assertEquals(array(0..5)+array(0..6)+array(10..15), arr)

		arr = [1, 2, 3]
		arr[2..-1] = array(0..5)
		@assertEquals([1, 2] + array(0..5), arr)
		arr[0..-1] = array(0..2)
		@assertEquals([0, 1], arr)

		arr = [1]
		arr[0..0] = [1, 2, 3]
		@assertEquals([1, 2, 3, 1], arr)
		@assertEquals([-1], arr[0..1] = [-1])
		@assertEquals([-1, 2, 3, 1], arr)
		arr[0..-2] = "abc"
		@assertEquals(["abc", 1], arr)
		arr[1..0] = 2
		@assertEquals(["abc", 2, 1], arr)

		@expectedErrorRaised(RangeError, -> arr[0..-5]= 2)
		@expectedErrorRaised(RangeError, -> arr[4..-1]= 2)

		arr = [1, 2, 3]
		arr.freeze()
		@expectedErrorRaised(AttributeError, -> arr[0..1]=0)

		arr = [1, 2, 3]
		@assertEquals([1, 2, 3, 4], arr << 4)
	}
}
