
fun expectedError(errType, fn) {
	try {
		fn()
	} intercept errType {
		return;
	} else {
		assert false
	}
}

fun anythingForeach(fn) {
	fn(null)
	fn(-1)
	fn(0)
	fn(1)
	fn(-1.0)
	fn(0.0)
	fn(1.0)
	fn("")
	fn("123")
}

fun operator_str_test() {
	assert [1, 2, 3] + [4, 5, 6] == [1, 2, 3, 4, 5, 6]
	assert [1, 2, 3] + [] == [1, 2, 3]
	assert [] + [4, 5, 6] == [4, 5, 6]
	assert [] + [] == []
	
	assert [] + [1] != []
	
	assert str([1, 2, 3]) == "[1, 2, 3]"
	
	class CustomClass {
		fun init(value) { this.value = value; }
		fun _str() { return this.value; }
		fun _equals(operand) {
			if (operand is CustomClass) {
				return operand.value == this.value
			}
			return false
		}
	}
	
	assert [CustomClass("a"), 2, CustomClass("c")] == 
	       [CustomClass("a"), 2, CustomClass("c")]
	
	assert [CustomClass("ab"), 2, CustomClass("c")] != 
	       [CustomClass("a"), 2, CustomClass("c")]
	
	assert [CustomClass("c, d"), "c, d", CustomClass("c, d, e"), CustomClass("a")] == 
	       [CustomClass("c, d"), "c, d", CustomClass("c, d, e"), CustomClass("a")]
	
	assert [CustomClass("a, b"), 2, CustomClass("c, s")]._str() ==
	       "[a, b, 2, c, s]"
	assert [CustomClass("1"), 2, CustomClass("3")]._str() ==
	       "[1, 2, 3]"
	
	var arr = [1, 2, 3]
	arr.append(arr)
	assert str(arr) == "[1, 2, 3, [...]]"
	
	var arr = []
	arr.append(arr)
	assert str(arr) == "[[...]]"
	
	class CustomClass {
		fun _str() { raise TypeError(""); }
	}
	expectedError(TypeError, lambda -> str([1, 2, 3, CustomClass()]))
}

fun insertion_deletion_0_test() {
	var arr = []
	arr.append(5)
	arr.append(6)
	arr.append(7)
	// [5, 6, 7]
	assert arr == [5, 6, 7]
	assert arr.size() == 3
	
	arr.deleteAt(1) // delete 2
	// [5, 7]
	assert arr == [5, 7]
	assert arr.size() == 2
	
	// insert 5 at index 1: [5, 9, 7]
	arr.insert(1, 9)
	assert arr == [5, 9, 7]
	
	// insert 12 at index 2: [5, 9, 12, 7]
	arr.insert(2, 12)
	assert arr == [5, 9, 12, 7]
	assert arr.size() == 4
	
	// delete 5 that first occurs in the array
	// [9, 12, 7]
	assert arr.delete(5)
	assert arr == [9, 12, 7]
	
	// [12, 7]
	assert arr.delete(9)
	assert arr == [12, 7]
	assert arr.size() == 2
	
	// [12]
	arr.deleteAt(1)
	assert arr == [12]
	assert arr.size() == 1
	
	assert !arr.delete(99)
	assert !arr.delete(13)
	
	arr = []
	arr.insert(0, 2)
	assert arr == [2]
	assert !arr.delete(null)
	
	// Test Errors:
	var re = RangeError
	
	arr = []
	expectedError(re, lambda -> arr.insert(1, 2))
	expectedError(re, lambda -> arr.deleteAt(1))
	
	arr = [1]
	expectedError(re, lambda -> arr.insert(-1, 2))
	expectedError(re, lambda -> arr.deleteAt(-1))
}

fun insertion_deletion_1_test() {
	assert [].appendAll(1, 2, 3, 4, 5) == [1, 2, 3, 4, 5]
	assert [1, 2, 3].appendAll(1, 2, 3) == [1, 2, 3, 1, 2, 3]
	assert [1, 2, 3].appendAll() == [1, 2, 3]
	assert [].appendAll([1, 2, 3]) == [[1, 2, 3]]
	assert [].appendAll(*[1, 2, 3]) == [1, 2, 3]
	assert [].appendAll() == []
	
	var arr = []
	assert arr.appendAll(1, 2, 3) == [1, 2, 3]
	assert arr.size() == 3
	
	assert arr.appendAll(*arr) == [1, 2, 3, 1, 2, 3]
	assert arr.size() == 6
	
	assert arr.appendAll(*Array(100, lambda i -> i)) == 
	       [1, 2, 3, 1, 2, 3] + Array(100, lambda i -> i)
	assert arr.size() == 106
	
	var arr = Array(2, null)
	arr.clear()
	assert arr.size() == 0
	arr.appendAll(*Array(50, null))
	assert arr.size() == 50
	arr.foreach(lambda i, e -> assert e == null)
	
	assert [1].insertAll(1, 2, 2, 3) == [1, 2, 2, 3]
	assert [1, 2, 3].insertAll(3, *[2, 2, 3]) == [1, 2, 3, 2, 2, 3]
	assert [].insertAll(0, 2, 2, 3) == [2, 2, 3]
	
	var arr = Array(20, null)
	arr.insertAll(10, *Array(60, null))
	assert arr.size() == 80
	for (i in range(0, 80)) assert arr[i] == null
	
	var arr = [1, 2, 3]
	assert arr.insertAll(1, *arr) == [1, 1, 2, 3, 2, 3]
	assert arr.size() == 6
	
	assert [1, 2, 3, 4].deleteRange(0, 2) == [3, 4]
	assert [1, 2, 3, 4].deleteRange(0, 4) == []
	assert [1, 2, 3, 4].deleteRange(2, 4) == [1, 2]
	assert [1, 2, 3, 4].deleteRange(3, 4) == [1, 2, 3]
	assert [1].deleteRange(0, 0) == [1]
	assert [1, 2].deleteRange(0, 0) == [1, 2]
	
	var arr = Array(100, lambda i -> i)
	assert arr.copyRange(50, arr.size()) == arr.deleteRange(0, 50) 
	assert arr.size() == 50
	
	// Test Errors:
	var re = RangeError
	
	expectedError(re, lambda -> [].deleteRange(0, 0))
	expectedError(re, lambda -> [].deleteRange(-1, 1))
	expectedError(re, lambda -> [1].deleteRange(0, 2))
	expectedError(re, lambda -> [1, 2, 3].deleteRange(3, 3))
	
	expectedError(re, lambda -> [].insertAll(1, 0, 1))
	expectedError(re, lambda -> [].insertAll(-1, 1))
	expectedError(re, lambda -> [1].insertAll(2, 2))
	expectedError(re, lambda -> [1, 2, 3].insertAll(4, 3))
	
	var arr = [1, 2, 3]
	
	expectedError(re, lambda -> arr.insertAll(4, 3))
	assert arr == [1, 2, 3]
	assert arr.size() == 3
	
	expectedError(re, lambda -> arr.deleteRange(0, 5))
	assert arr == [1, 2, 3]
	assert arr.size() == 3
}

fun set_get_foreach_test() {
	var arr = [5, 6, 7]
	
	fun assertGet(arr, *expectedElements) {
		for (i in range(0, expectedElements.size())) {
			assert arr[i] == expectedElements[i]
			assert arr.get(i) == expectedElements.get(i)
			assert arr._getItem(i) == expectedElements._getItem(i)
		}
	}
	
	fun assertSet(arr, *elements) {
		for (i in range(0, elements.size())) {
			arr[i] = elements[i]
			assert arr[i] == elements[i]
		}
		
		for (i in range(0, elements.size())) {
			arr.set(i, 0)
			assert arr.get(i) == 0
		}
		
		for (i in range(0, elements.size())) {
			arr._setItem(i, elements[i])
			assert arr[i] == elements[i]
		}
	}
	
	assertGet(arr, 5, 6, 7)
	assertSet(arr, 6, 7, 8)
	assertGet(arr, 6, 7, 8)
	
	var sample = Array(100, lambda e -> range(0, 100000).rand())
	var arr = []
	
	sample.foreach(lambda i, e -> arr.append(e))
	assert sample == arr
	
	arr.foreach(lambda i, e -> {
		assert arr[i] == e
		assert sample[i] == e
	})
	
	expectedError(TypeError, lambda -> 
		arr.foreach(lambda i, e -> raise TypeError("")))
	
	var arr = sample.copy()
	assert arr == sample
	arr.foreach(lambda i, e -> arr.insert(i + 1, e))
	
	expectedError(RangeError, lambda ->
		arr.foreach(lambda i, e -> arr.deleteAt(i)))
	
	var i = 0
	for (e in arr) {
		assert e == arr[i]
		i += 1
	}
	
	// Test Errors:
	var re = RangeError
	
	arr = []
	fun errors(index) {
		expectedError(re, lambda -> arr[index])
		expectedError(re, lambda -> arr.get(index))
		expectedError(re, lambda -> arr._getItem(index))
		expectedError(re, lambda -> arr[index] = 0)
		expectedError(re, lambda -> arr.set(index, 0))
		expectedError(re, lambda -> arr._setItem(index, 0))
	}
	for (i in range(-1, 3)) errors(i)
}

fun indexof_test() {
	var arr = []
	
	anythingForeach(lambda e -> assert arr.indexOf(e) == -1)
	anythingForeach(lambda e -> assert arr.lastIndexOf(e) == -1)
	anythingForeach(lambda e -> assert !arr.contains(e))
	
	assert [1, 2, 3, 4, 5].indexOf(1) == 0
	assert [1, 2, 3, 4, 5].indexOf(5) == 4
	assert [1, 2, 3, 4, 5].indexOf(3) == 2
	assert [1, 2, 2, 4, 5].indexOf(2) == 1
	
	assert [1, 2, 3, 4, 5].indexOf(0) == -1
	
	assert [1, 2, 3, 4, 1].lastIndexOf(1) == 4
	assert [1, 2, 4, 4, 1].lastIndexOf(4) == 3
	assert [1, 9, 4, 4, 1].lastIndexOf(9) == 1
	assert [1, 2, 4, 4, 9].lastIndexOf(1) == 0
	
	assert [1, 2, 3, 4, 5].lastIndexOf(0) == -1
	
	var arr = [1, null, "0.1"]
	for (e in arr) assert arr.contains(e)
	
	class CustomClass {
		fun init(value) { this.value = value; }
		fun _equals(operand) {
			if (operand is CustomClass) {
				return this.value == operand.value
			}
			return false
		}
	}
	
	var arr = 
		[CustomClass("1"), CustomClass("1"), "1", 1, CustomClass(2)]
	assert arr.indexOf(CustomClass("1")) == 0
	assert arr.indexOf(1) == 3
	assert arr.indexOf("1") == 2
	
	assert arr.lastIndexOf(CustomClass("1")) == 1
	assert arr.lastIndexOf(CustomClass(2)) == 4
	
	assert arr.indexOf(CustomClass(9)) == -1
	assert arr.lastIndexOf(CustomClass(3)) == -1
	assert arr.lastIndexOf(CustomClass("a")) == -1
	
	assert arr.contains(CustomClass("1"))
	assert !arr.contains(CustomClass(false))
}

fun misc_0_test() {
	var arr = [1, 2]
	arr.swap(0, 1)
	assert arr == [2, 1]
	
	expectedError(RangeError, lambda -> arr.swap(-1, 0))
	expectedError(RangeError, lambda -> arr.swap(0, 2))
	
	assert [].reverse() == []
	assert [1].reverse() == [1]
	assert [1, 2].reverse() == [2, 1]
	assert [1, 2, 3].reverse() == [3, 2, 1]
	
	assert [1].append(2).append(-4).sort() ==
	       [-4, 1, 2]
	
	assert [].sort() == []
	
	var randArr = Array(1000, lambda e -> range(0, 10000).rand()).sort()
	var p = randArr[0]
	for (i in range(1, randArr.size())) {
		assert p <= randArr[i]
		p = randArr[i]
	}
	
	assert [1, 2, 3].toTuple() == (1, 2, 3)
	assert [1].toTuple() == (1,)
	assert [].toTuple() == ()
}

fun clear_test() {
	fun empty(arr) {
		assert [] == arr
		assert arr.size() == 0
	}
	
	empty([1, 2, 3].clear())
	empty([].clear())
}

fun init_test() {
	var arr = []
	for (i in range(0, 10000)) {
		arr.append(i)
	}
	assert arr == Array(10000, lambda i -> i)
	
	expectedError(ArgumentError, lambda -> Array(-1, null))
	expectedError(ArgumentError, lambda -> Array(2147483647, null))
	expectedError(ArgumentError, lambda -> Array(1, lambda -> {}))
	expectedError(TypeError, lambda -> Array(10000, lambda i ->
		if (i == 9999) raise TypeError("")
	))
}

fun long_literal_test() {
	var a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023]
	assert a.size() == 1024
	for (i in range(0, a.size())) {
		assert a[i] == i
	}
}

operator_str_test()
insertion_deletion_0_test()
insertion_deletion_1_test()
set_get_foreach_test()
indexof_test()
misc_0_test()
clear_test()
init_test()
long_literal_test()