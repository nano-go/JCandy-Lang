import (
	"./stream.cd" as stream
	"../class/linkedlist.cd" as ll
)

var students = Array(500, lambda i -> {
	var student = Object()
	student.age = range(18, 23).rand()
	student.mathScore = range(15, 101).rand()
	student.engScore = range(15, 101).rand()
	student.csScore = range(15, 101).rand()
	return student
})

fun expected(students) {
	var avrg = 0.0
	var limit = 0
	var n = 0
	for (s in students) {
		if (s.age >= 20) {
			var savrg = (s.mathScore + s.engScore + s.csScore) / 3
			if (savrg >= 40) {
				limit += 1
				if (limit <= 20) {
					continue
				}
				n += 1
				avrg += savrg
			}
		}
		if (limit >= 50) {
			break
		}
	}
	return avrg / n
}

fun cal(iterator) {
	return stream.Stream(students)
			.filter(lambda e -> e.age >= 20)
			.map(lambda e -> (e.mathScore + e.engScore + e.csScore) / 3)
			.filter(lambda e -> e >= 40)
			.limit(50)
			.skip(20)
			.collect(stream.averageCollector)
}

fun test() {
	var linkedList = ll.LinkedList()
	for (s in students) linkedList.append(s)
	assert cal(students) == expected(students)
	assert cal(linkedList) == expected(students)
	println(cal(students))
}
test()