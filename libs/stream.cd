
var EMPTY_STREAM = Object()

class StreamInterface {
	fun init(eval) {
		this.eval = eval
	}

	fun map(mapper) {
		var eval = this.eval
		this.eval = lambda -> {
			var value = eval()
			return EMPTY_STREAM == value ? value : mapper(value)
		}
		return this
	}

	fun flatMap(mapper) {
		var eval = this.eval
		var stream = null
		this.eval = lambda -> {
			while (true){
				if (stream) {	
					var value = stream.eval()
					if (EMPTY_STREAM != value) {
						return value;
					}
				}
				var value = eval()
				if (EMPTY_STREAM == value) {
					return EMPTY_STREAM
				}
				stream = mapper(value)
				stream = stream is StreamInterface ? stream : Stream(stream)
			}
		}
		return this
	}

	fun peek(consumer) {	
		var eval = this.eval
		this.eval = lambda -> {
			var value = eval()
			if (EMPTY_STREAM != value) consumer(value)
			return value
		}
		return this
	}	

	fun filter(filter) {
		var eval = this.eval
		this.eval = lambda -> {
			var value = eval()
			while (EMPTY_STREAM != value && !filter(value)) {
				value = eval()
			}
			return value
		}
		return this
	}

	fun skip(n) {
		var eval = this.eval
		this.eval = lambda -> {
			var value = eval()
			while (n > 0 && EMPTY_STREAM != value) {
				n -= 1
				value = eval()
			}
			return value
		}
		return this
	}

	fun limit(n) {
		var eval = this.eval
		this.eval = lambda -> {
			if (n <= 0) return EMPTY_STREAM
			n -= 1
			return eval()
		}
		return this
	}

	fun distinct() {
		var eval = this.eval
		var set = {}
		this.eval = lambda -> {
			var value = eval()
			while (EMPTY_STREAM != value && set.contains(value)) {
				value = eval()
			}
			set[value] = null
			return value
		}
		return this
	}	

	fun sort() {
		var eval = this.eval
		var sortedArr = null
		var p = 1
		var size = 0
		var emptyStream = EMPTY_STREAM

		fun getElement(p, sortedArr) {
			var value = sortedArr[p]
			sortedArr[p] = null
			return value
		}

		this.eval = lambda -> {
			if (sortedArr) {
				if (p >= size) return emptyStream
				p += 1
				return getElement(p-1, sortedArr)
			}
			sortedArr = []
			var value
			while (emptyStream != (value = eval())) {
				sortedArr.append(value)
			}
			sortedArr.sort()
			size = sortedArr.length()
			return size != 0 ? getElement(0, sortedArr) : emptyStream
		}
		return this
	}

	fun foreach(consumer) {
		var eval = this.eval
		var emptyStream = EMPTY_STREAM;
		var value
		while (emptyStream != (value = eval())) {
			consumer(value)
		}
	}

	fun reduce(initVal, operator) {
		var eval = this.eval
		var emptyStream = EMPTY_STREAM;
		var value
		var result = initVal
		while (emptyStream != (value = eval())) {
			result = operator(result, value)
		}
		return result
	}

	fun fold(operator) {
		var eval = this.eval
		var emptyStream = EMPTY_STREAM;
		var value = eval()
		if (value == emptyStream) return null;
		var result = value
		while (emptyStream != (value = eval())) {
			result = operator(result, value)
		}
		return result
	}

	fun max() {
		return this.fold(lambda x, y -> x > y ? x : y)
	}

	fun min() {
		return this.fold(lambda x, y -> x < y ? x : y)
	}

	fun sum() {
		return this.fold(lambda x, y -> x + y)
	}

	fun count() {
		var eval = this.eval
		var emptyStream = EMPTY_STREAM;
		var value
		var count = 0
		while (emptyStream != (value = eval())) {
			count += 1
		}
		return count
	}

	fun allMatch(matcher) {
		var eval = this.eval
		var emptyStream = EMPTY_STREAM;
		var value
		while (emptyStream != (value = eval())) {
			if (!matcher(value)) return false
		}
		return true
	}

	fun anyMatch(matcher) {
		var eval = this.eval
		var emptyStream = EMPTY_STREAM;
		var value
		while (emptyStream != (value = eval())) {
			if (matcher(value)) return true
		}
		return false
	}

	fun noneMatch(matcher) {
		var eval = this.eval
		var emptyStream = EMPTY_STREAM;
		var value
		while (emptyStream != (value = eval())) {
			if (matcher(value)) return false
		}
		return true
	}

	fun findFirst() {
		var value = this.eval()
		return EMPTY_STREAM != value ? value : null
	}

	fun _collect(suppiler, accumulator, finisher) {
		var eval = this.eval
		var emptyStream = EMPTY_STREAM;
		var value
		while (emptyStream != (value = eval())) {
			accumulator(suppiler, value)
		}
		return finisher(suppiler)
	}

	fun collect(collector) {
		return this._collect(collect.suppiler, collector.accumulator, collector.finisher)
	}

	fun toArray() {
		return this._collect([], 
			lambda arr, e -> arr.append(e), 
			lambda arr -> arr)
	}

	fun toTuple() {
		return this._collect([], 
			lambda arr, e -> arr.append(e), 
			lambda arr -> tuple(arr))
	}

	fun toMap(accumulator) {
		return this._collect({}, 
			accumulator,
			lambda map -> map)
	}

	fun join(seperator) {
		return this._collect([],
			lambda arr, e -> arr.append(e),
			lambda arr -> seperator.join(arr))
	}
}

fun Stream(iterable) {
	var iterator = iterable._iterator()
	return StreamInterface(lambda -> 
		iterator._hasNext() ? iterator._next() : EMPTY_STREAM);
}
