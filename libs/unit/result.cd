
var STATE_SUCCESS = 0
var STATE_SKIPPED = 1
var STATE_ERROR   = 2
var STATE_FAILURE = 3

var STATE_STRINGS = ["success", "skipped", "error", "failure"]

class TaskResult {
	fun init(name, t, e, state) {
		this.name = name
		this.t = t
		this.e = e
		this.state = state
		this.msg = e ? e.getMessage() : ""
	}

	fun getName() {
		return this.name
	}

	fun getDuration() {
		return this.t
	}

	fun getMessage() {
		return this.msg
	}

	fun getError() {
		return this.e
	}

	fun stateStr() {
		return STATE_STRINGS[this.state]
	}

	fun getState() {
		return this.state
	}

	fun isSkipped() {
		return this.state == STATE_SKIPPED
	}

	fun isFailure() {
		return this.state == STATE_FAILURE
	}

	fun isError() {
		return this.state == STATE_ERROR
	}

	fun isSuccess() {
		return this.state == STATE_SUCCESS
	}

	fun isGroup() {
		return false
	}
}

class Group {
	fun init(name) {
		this.subtasks = []
		this.name = name
	}

	fun getName() {
		return this.name
	}
	
	fun append(task) {
		this.subtasks.append(task)
	}

	fun subtaskCount() {
		return this.subtasks.length()
	}

	fun isGroup() {
		return true
	}

	fun _iterator() {
		return this.subtasks._iterator()
	}
}

class Result {
	fun init() {
		this.taskCount = 0
		this.totalDuration = 0
		this.taskResults = []
		this.pushedGroup = []

		this.failureResults = []
		this.errorResults = []
		this.skippedResults = []
		this.successResults = []
		var resultArray = Array(4, null)
		resultArray[STATE_SUCCESS] = this.successResults
		resultArray[STATE_FAILURE] = this.failureResults
		resultArray[STATE_ERROR] = this.errorResults
		resultArray[STATE_SKIPPED] = this.skippedResults
		this.resultArray = resultArray
	}
	
	fun getTaskResults() {
		return this.taskResults
	}

	fun getTotalDuration() {
		return this.totalDuration
	}

	fun getPassRate() {
		return this.getSuccessCount().doubleVal() / this.taskCount
	}

	fun getTaskCount() {
		return this.taskCount
	}

	fun getSuccessResults() {
		return this.successResults
	}

	fun getSuccessCount() {
		return this.successResults.length()
	}

	fun getFailureResults() {
		return this.failureResults
	}

	fun getFailureCount() {
		return this.failureResults.length()
	}

	fun getErrorResults() {
		return this.errorResults
	}

	fun getErrorCount() {
		return this.errorResults.length()
	}

	fun getSkippedResults() {
		return this.skippedResults
	}

	fun getSkippedCount() {
		return this.skippedResults.length()
	}

	fun pushGroup(name) {
		this.pushedGroup.append(Group(name))
	}

	fun popGroup() {
		var group = this.pushedGroup.deleteAt(this.pushedGroup.length()-1)
		this._addTaskResult(group)
	}

	fun _addTaskResult(task) {
		if (this.pushedGroup.length() != 0) {
			this.pushedGroup.get(this.pushedGroup.length()-1).append(task)
		} else {
			this.taskResults.append(task)
		}
		if (task is TaskResult) {
			this.totalDuration += task.getDuration()
			if (!task.isSkipped()) this.taskCount += 1
			this.resultArray[task.getState()].append(task)
		}
	}

	fun addSuccess(name, t) {
		this._addTaskResult(TaskResult(name, t, null, STATE_SUCCESS))
	}

	fun addFailure(name, t, e) {
		this._addTaskResult(TaskResult(name, t, e, STATE_FAILURE))
	}

	fun addError(name, t, e) {
		this._addTaskResult(TaskResult(name, t, e, STATE_ERROR))
	}

	fun addSkip(name) {
		this._addTaskResult(TaskResult(name, 0, null, STATE_SKIPPED))
	}

	fun _iterator() {
		return this.taskResults._iterator()
	}
}


