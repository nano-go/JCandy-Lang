import (
	"test_runner" as tr
	"test_case" as tc
	"test_suite" as ts
	"stream" as stream
)

fun importTestClasses(modules) {
	fun getTestClasses(module) {
		return stream.Stream(module)
			.map(lambda e -> e[1])
			.filter(lambda e -> e is tc.TestCase or e is ts.TestSuite)
			.filter(lambda e -> e._class() != tc.TestCase and e._class() != ts.TestSuite)
			.map(lambda e -> e._class() == e ? e() : e)
			.toArray()
	}
	
	var testClasses = []
	for (m in modules) {
		try {
			var module = importModule(m)
			testClasses.appendAll(*getTestClasses(module))
		} intercept ModuleError as e {
			println(e.getMessage())
		} 
	}
	return testClasses
}

fun runTestClasses(testClasses) {
	if (testClasses.isEmpty()) {
		println("No test class found.")
		return;
	}
	tr.TestRunner().run(ts.TestSuite(null, *testClasses))
}

fun main() {
	var flags = cmdArgs()
	var modules = !flags.isEmpty() ? flags : ["test"]
	var testClasses = importTestClasses(modules)
	runTestClasses(testClasses)
}

main()
