import "result" as result
import "unit_utils" as u

class AssertionError : Error {
	fun init(msg) {
		super.init(msg)
	}
}

/**
 * If you raise an skip error in a test method, the test method
 * will be skipped.
 */
class SkipError : Error {
	fun init() {
		super.init("")
	}
}

class TestCase {

	/**
	 * This method must return a function used to find all test methods of this
	 * class.
	 */
	fun filter() {
		return lambda e -> e.name.endWith("_test")
	}

	/**
	 * Returns a name of this test case.
	 */
	fun name() {
		return this._class().className
	}
	
	fun run(result) {
		result.pushGroup(@name())
		methods(this)
			.filter(@filter())
			.foreach(u.partial(@_exeMethod, result))
		result.popGroup()
	}
	
	fun _exeMethod(result, method) {
		var name = method.name
		var partial = u.partial

		fun exeSpecialMethod(fn, duration) {
			var s = curTime()
			try {
				fn()
			} intercept as e {
				@_addResultByError(result, name, e, curTime()-s+duration)
				// stop the pipel.
				return false
			}
			return curTime()-s+duration
		}

		u.pipel(
			partial(exeSpecialMethod, @setUp),
			partial(exeSpecialMethod, method),
			partial(exeSpecialMethod, @tearDown),
			// success.
			partial(result.addSuccess, name)
		)(0)
	}
	
	fun _addResultByError(result, name, e, t) {
		if (e == null) {
			result.addSuccess(name, t)
		} else if (e is SkipError) {
			result.addSkip(name)
		} else if (e is AssertionError) {
			result.addFailure(name, t, e)
		} else {
			result.addError(name, t, e)
		}
	}

	/**
	 * Raise an skip error to skip the running test method.
	 * The skipped test method will not be counted in tasks.
	 */
	fun skip() {
		raise SkipError()
	}
	
	/**
	 * The tearDown called after every test method has been called.
	 *
	 * If the tearDown raises an error while the test is running, 
	 * the test method will not be executed. Any error, other than
	 * AssertionError or SkipError, raised by this method will be 
	 * considered an error instead of a test failure.
	 */
	fun tearDown() {}
	
	/*
	 * The setup called before calling every test method.
	 *
	 * If the setUp raises an error while the test is running, 
	 * the test method will not be executed. Any error, other than
	 * AssertionError or SkipError, raised by this method will be 
	 * considered an error instead of a test failure.
	 */
	fun setUp() {}
	
	/**
	 * Fails a test.
	 */
	fun assertFail(msg="") {
		raise AssertionError(msg)
	}
	
	/**
	 * Asserts that the `actual` is equal to the `expected`.
	 * If it isn't, will stop the test method and mark it with failure.
	 */
	fun assertEquals(expected, actual, msg="") {
		if (expected != actual) {
			@assertFail("Expected ${expected}, but was ${actual}: <${msg}>")
		}
	}
	
	/**
	 * Asserts that the `actual` is not equal to the `unexpected`.
	 * If it isn't, will stop the test method and mark it with failure.
	 */
	fun assertNotEquals(unexpected, actual, msg="") {
		if (unexpected == actual) {
			@assertFail("Unexpected ${unexpected}: <${msg}>")
		}
	}
	
	/**
	 * Asserts that the `condition` is true. If it isn't, will stop
	 * the test method and mark it with failure.
	 */
	fun assertTrue(condition, msg="") {
		if (!condition) {
			@assertFail(msg)
		}
	}
	
	/**
	 * Asserts that the `condition` is false. If it isn't, will stop
	 * the test method and mark it with failure.
	 */
	fun assertFalse(condition, msg="") {
		if (condition) {
			@assertFail(msg)
		}
	}

	/**
	 * Asserts that the `object` is null. If it isn't, will stop
	 * the test method and mark it with failure.
	 */
	fun assertNull(object, msg="") {
		this.assertEquals(null, object, msg)
	}
	
	/**
	 * Asserts that the `object` is not null. If it isn't, will stop
	 * the test method and mark it with failure.
	 */
	fun assertNotNull(object, msg="") {
		this.assertNotEquals(null, object, msg)
	}

	/**
	 * Asserts that the 'object' is an instance of 'cls'. If it isn't, 
	 * will stop the test method and mark it with failure.
	 */
	fun assertIsInstance(cls, object, msg="") {
		if (!(object is cls)) {
			this.assertFail(
				"Expected <${cls.className}> but the class of the <${object}> was "+
				"<${object._class().className}>: <${msg}>"
			)
		}
	}

	/**
	 * Asserts that the 'object' is not an instance of 'cls'. If it isn't, 
	 * will stop the test method and mark it with failure.
	 */
	fun assertIsNotInstance(cls, object, msg="") {
		if (object is cls) {
			this.assertFail(
				"Unexpected that the <${object}> was an instance of the <${cls}>"
			)
		}
	}
	
	/**
	 * Asserts that an error which is an instance of the given errType
	 * is raised when the fn is called. If it isn't, will stop the test
	 * method and mark it with failure.
	 *
	 * errType: If it's null, it represents Error. It must be an error type.
	 */
	fun expectedErrorRaised(errType = null, fn, msg="") {
		if (errType == null) {
			errType = Error
		} 
		try {
			fn()
		} intercept errType {
			return
		} intercept as e {	
			@assertFail(
				"It is expected that the <${errType.className}> is raised but " +
				"the <${e._class().className}> was raised: <${msg}>"
			)
		} else {
			@assertFail(
				"It is expected that the <${errType.className}> is raised but " +
				"no errors were raised: <${msg}>"
			)
		}
	}
} 
